{\rtf1\ansicpg65001{\fonttbl\f0\fcharset1 Arial;\f1\fcharset1 Consolas;\f2\fcharset1 Comic Sans MS;}\f0
{\colortbl ;\red114\green90\blue122;\red53\green92\blue125;\red197\green108\blue134;\red255\green117\blue130;}
Есть много разных способов из этой грамматики сделать парсер, но это приложение рассматривает только
 {\field{\*\fldinst HYPERLINK "https://ru.wikipedia.org/wiki/Метод_рекурсивного_спуска"}
{\fldrslt метод рекурсивного спуска}}, потому что его проще всего визуализировать.\par
Он из каждого правила делает функцию, которая принимает на вход индекс в строке и возвращает статус своего успеха и новый индекс.\par
Этот индекс иногда делают глобальной переменной, и у меня он отображается как правая граница корневого узла дерева.\par
Этот метод имеет один крупный недостаток: он никак не может справится с
 {\field{\*\fldinst HYPERLINK "https://en.wikipedia.org/wiki/Left_recursion"}
{\fldrslt левой рекурсией}}, например \f1\cf2 sum\cf4  ::= \cf2 sum\cf4  \cf1 "+"\cf4  \cf2 product\cf0\f0.\par
\par
Тут у меня визуализируется парсер арифметических выражений с "+" и "*",
 потому что это самый простой пример, имеющий осмысленный аналог в реальности.\par
}
